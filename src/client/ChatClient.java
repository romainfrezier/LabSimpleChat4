// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer {  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;  ObservableClient oc;    //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI) throws IOException {    this.oc = new ObservableClient(host, port);    oc.addObserver(this);    this.clientUI = clientUI;  }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {    try    {      if(message.startsWith("#")){        if (message.equals("#quit")){          quit();        } else if (message.equals("#logoff")){          oc.closeConnection();        } else if (message.startsWith("#sethost")) {          if (oc.isConnected()){            clientUI.display("You can not change host during connection");          } else {            String[] splitedMessage = message.split(" +");            oc.setHost(splitedMessage[1]);            clientUI.display("Host set up to : " + splitedMessage[1]);          }        } else if (message.startsWith("#setport")) {          if (oc.isConnected()){            clientUI.display("You can not change host during connection");          } else {            String[] splitedMessage = message.split(" +");            if (splitedMessage.length > 1){              oc.setPort(Integer.parseInt(splitedMessage[1]));              clientUI.display("Port set up to : " + splitedMessage[1]);            }          }        } else if (message.startsWith("#login")) {          oc.openConnection();          oc.sendToServer(message);        } else if (message.equals("#gethost")) {          clientUI.display(oc.getHost());        } else if (message.equals("#getport")) {          clientUI.display(Integer.toString(oc.getPort()));        } else {          clientUI.display("Sorry, command unknown...");        }      } else if (!oc.isConnected()){        clientUI.display("You are not connected to server. Please login");      } else {        oc.sendToServer(message);      }    }    catch(IOException e)    {      clientUI.display        ("Could not send message to server. Please try to login");    }  }    /**   * This method terminates the client.   */  public void quit()  {    try    {      oc.closeConnection();    }    catch(IOException e) {}    System.exit(0);  }  protected void connectionEstablished() {    clientUI.display("Connection successfully established on port " + oc.getPort());  }  protected void connectionClosed() {    clientUI.display("Connection with server has been lost");  }  protected void connectionException() {    clientUI.display("An error as occurred : server shut down now");    System.exit(0);  }  @Override  public void update(Observable o, Object arg) {      if (arg instanceof Exception){        connectionException();      } else if (arg.equals(ObservableClient.CONNECTION_CLOSED)){        connectionClosed();      } else if (arg.equals(ObservableClient.CONNECTION_ESTABLISHED)) {        connectionEstablished();      } else {        handleMessageFromServer(arg);      }  }}//End of ChatClient class