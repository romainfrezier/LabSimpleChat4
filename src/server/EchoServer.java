package server;// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import java.util.Observable;import java.util.Observer;import common.ChatIF;import ocsf.server.*;/** * This class overrides some of the methods in the abstract  * superclass in order to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class EchoServer implements Observer{  //Class variables *************************************************  ChatIF svUI;  ObservableOriginatorServer oos;    //Constructors ****************************************************    /**   * Constructs an instance of the echo server.   *   * @param port The port number to connect on.   */  public EchoServer(int port, ChatIF ui)  {    this.oos = new ObservableOriginatorServer(port);    this.oos.addObserver(this);    this.svUI = ui;  }    //Instance methods ************************************************    /**   * This method handles any messages received from the client.   *   * @param msg The message received from the client.   * @param client The connection from which the message originated.   */  public void handleMessageFromClient    (Object msg, ConnectionToClient client)  {    if (client.getInfo("id") == null){      if (msg.toString().startsWith("#login")){        String[] splitMessage = msg.toString().split(" +");        String id;        if (splitMessage.length == 1){          id = "anonymous";        } else {          id = splitMessage[1];        }        client.setInfo("id", id);      } else {        try {          client.sendToClient("You must log in first.");          client.close();        } catch (IOException e) {          throw new RuntimeException(e);        }      }    } else {      if (msg.toString().startsWith("#login")){        try {          client.sendToClient("You already logged in.");        } catch (IOException e) {          throw new RuntimeException(e);        }      } else {        System.out.println("Message received: " + msg + " from " + client.getInfo("id"));        oos.sendToAllClients(client.getInfo("id") + ": " + msg);      }    }  }      /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */  protected void serverStarted()  {    svUI.display("Server listening for connections on port " + oos.getPort());      ;  }    /**   * This method overrides the one in the superclass.  Called   * when the server stops listening for connections.   */  protected void serverStopped()  {    svUI.display("Server has stopped listening for connections.");  }  protected void serverClosed(){    svUI.display("Server closed.");  }  //Class methods ***************************************************  protected void clientConnected(ConnectionToClient client) {    svUI.display("Client " + client + " connected");  }  protected synchronized void clientDisconnected(ConnectionToClient client) {    svUI.display("A client disconnected");  }  protected synchronized void clientException(ConnectionToClient client) {    svUI.display("Client "+ client +" has exception");  }  public void handleCommand(String message) {    if (message.equals("#quit")){      System.exit(0);    } else if (message.equals("#close")) {      try {        oos.close();      } catch (IOException e) {        throw new RuntimeException(e);      }    } else if (message.equals("#stop")) {      oos.stopListening();    } else if (message.equals("#start") && !oos.isListening()) {      try {        oos.listen();      } catch (IOException e) {        throw new RuntimeException(e);      }    } else if (message.equals("#getport")) {      svUI.display(Integer.toString(oos.getPort()));    } else if (message.startsWith("#setport")) {      if (oos.isListening()){        svUI.display("You can not change port during listening");      } else {        String[] splitMessage = message.split(" +");        oos.setPort(Integer.parseInt(splitMessage[1]));        svUI.display("Port set up to : " + oos.getPort());      }    } else {      svUI.display("Sorry, command unknown...");    }  }  public boolean isCommand(String message){    return message.startsWith("#");  }  public void handleMessageFromServerUI(String message){    if (isCommand(message)){      handleCommand(message);    } else {      oos.sendToAllClients("server MSG> " + message);    }  }  @Override  public void update(Observable o, Object arg) {    OriginatorMessage originatorMessage = (OriginatorMessage) arg;    Object message = originatorMessage.getMessage();    ConnectionToClient client = originatorMessage.getOriginator();    if (message.toString().startsWith(ObservableServer.CLIENT_EXCEPTION)){      clientException(client);    } else if (message.equals(ObservableServer.CLIENT_DISCONNECTED)){      clientDisconnected(client);    } else if (message.equals(ObservableServer.CLIENT_CONNECTED)) {      clientConnected(client);    } else if (message.equals(ObservableServer.SERVER_STARTED)) {      serverStarted();    } else if (message.equals(ObservableServer.SERVER_STOPPED)) {      serverStopped();    } else if (message.equals(ObservableServer.SERVER_CLOSED)) {      serverClosed();    } else {      handleMessageFromClient(message, client);    }  }}//End of server.EchoServer class